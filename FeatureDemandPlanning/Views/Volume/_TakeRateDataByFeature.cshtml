@using System.Data
@using enums = FeatureDemandPlanning.Model.Enumerations

@model FeatureDemandPlanning.Model.ViewModel.FdpOxoVolumeViewModel

@{
    var featureRow = (DataRow)TempData["CurrentRow"];
    var featureIdentifier = featureRow.Field<string>("FeatureIdentifier");
}

<tr data-target="@featureIdentifier" data-group="@(featureRow.Field<string>("FeatureGroup"))" data-subgroup="@(featureRow.Field<string>("FeatureSubGroup"))">
    @{
        var featureClassName = "";
        var featureFixedClassName = "cross-tab-fixed";
        var featureFixedLastClassName = "cross-tab-fixed-last";
        if (featureRow.Field<string>("FeatureIdentifier").StartsWith("F"))
        {
            featureClassName = "fdp-data-item";
            featureFixedClassName = "fdp-data-item-fixed";
            featureFixedLastClassName = "fdp-data-item-fixed-last";
        }
    }

    <td class="cross-tab-data-item @featureFixedClassName @featureClassName">
        @(featureRow.Field<string>("BrandDescription"))

        <div class="changed-indicator pull-right" style="display:none" title="Changes have been made to the take rate / volume data for this feature">
            <span class="glyphicon glyphicon-wrench" style="position:relative;top:50%;transform:translateY(50%)"></span>
        </div>

        @if (featureRow.Field<bool>("HasRule"))
        {
            <div class="indicator rule-item pull-right"><span class="glyphicon glyphicon-alert" style="position:relative;top:50%;transform:translateY(50%)"></span>&nbsp;</div>
        }
        @if (!string.IsNullOrEmpty(featureRow.Field<string>("FeatureComment")))
        {
            <div class="indicator comment-item pull-right" data-toggle="popover" title="Comments" data-content="@(featureRow.Field<string>("FeatureComment"))"><span class="glyphicon glyphicon-pencil" style="position:relative;top:50%;transform:translateY(50%)"></span>&nbsp;</div>
        }
    </td>
    <td class="cross-tab-data-item @featureFixedClassName text-center @featureClassName">@(featureRow.Field<string>("FeatureCode"))</td>
    <td class="cross-tab-data-item @featureFixedClassName @featureFixedLastClassName @featureClassName text-center">
        @if (Model.Volume.Mode == enums.TakeRateResultMode.PercentageTakeRate)
        {
            <span>@(string.Format("{0:P2}", featureRow.Field<decimal>("TotalPercentageTakeRate")))</span>
        }
        else
        {
            <span>@(featureRow.Field<int>("TotalVolume"))</span>
        }
    </td>
    @foreach (var availableModel in Model.Volume.Vehicle.AvailableModels)
    {
        var modelClassName = "";
        var modelIdentifier = availableModel.StringIdentifier;
        if (featureIdentifier.StartsWith("F") || availableModel.FdpModelId.HasValue)
        {
            modelClassName = "fdp-data-item";
        }
        else
        {
            modelClassName = "";
        }
        <td class="text-center cross-tab-data-item editable @modelClassName @RenderDataClass(modelIdentifier, featureRow)" data-target="@modelIdentifier|@featureIdentifier">
            @RenderDataItem(availableModel.StringIdentifier, featureRow)
        </td>
    }
</tr>

@helper RenderDataItem(string modelIdentifier, DataRow dataItem)
{
    var rowIdentity = dataItem.Field<long?>("Id");
    var featureIdentifier = dataItem.Field<string>("FeatureIdentifier");
    var featureApplicability =
        Model.Volume.VolumeData.FeatureApplicabilityData.Where(fa => fa.Field<long?>("Id") == rowIdentity)
        .Select(fa => fa.IsNull(modelIdentifier) ? string.Empty : fa.Field<string>(modelIdentifier))
        .FirstOrDefault();


    var parsedFeatureApplicability = featureApplicability
            .Replace("*", string.Empty)
            .Replace("(", string.Empty)
            .Replace(")", string.Empty);

    // If volume
    // 1. If no value and optional or standard (-)
    // 2. If no value and not applicable (N/A)
    // 3. If value render the value regardless of applicability
    // 4. If no coded applicability and no value (-)

    // If percentage
    // 1. If no value and optional or standard (-)
    // 2. If no value and not applicable (N/A)
    // 3. If value render the value regardless of applicability
    // 4. If no coded applicability and no value (-)

    var dataText = "-";

    if (Model.Volume.Mode == enums.TakeRateResultMode.PercentageTakeRate)
    {
        var value = dataItem.Field<decimal?>(modelIdentifier);
        if (value.GetValueOrDefault() == 0 && parsedFeatureApplicability == "NA" && featureIdentifier.StartsWith("O"))
        {
            dataText = "N/A";
        }
        else if (value.HasValue)
        {
            dataText = value.Value.ToString("P2");
        }
    }
    else
    {
        var value = dataItem.Field<int?>(modelIdentifier);
        if (value.GetValueOrDefault() == 0 && parsedFeatureApplicability == "NA" && featureIdentifier.StartsWith("O"))
        {
            dataText = "N/A";
        }
        else if (value.HasValue)
        {
            dataText = value.Value.ToString("G");
        }
    }

    @dataText
}

@helper RenderDataClass(string modelIdentifier, DataRow dataItem)
{
    var rowIdentity = dataItem.Field<long?>("Id");
    var featureApplicability =
        Model.Volume.VolumeData.FeatureApplicabilityData.Where(fa => fa.Field<long?>("Id") == rowIdentity)
        .Select(fa => fa.IsNull(modelIdentifier) ? string.Empty : fa.Field<string>(modelIdentifier))
        .FirstOrDefault();

    if (string.IsNullOrEmpty(featureApplicability))
    {
        @("text-muted");
    }
    else
    {
        var parsedFeatureApplicability = featureApplicability
            .Replace("*", string.Empty)
            .Replace("(", string.Empty)
            .Replace(")", string.Empty);

        switch (parsedFeatureApplicability)
        {
            case "O":
                @("optionalFeature");
                break;
            case "S":
            @("standardFeature");
            break;
            case "P":
            @("packFeature");
            break;
            case "NA":
            @("text-muted");
            break;
            default:
            @("text-muted");
            break;
        }
    }

}
