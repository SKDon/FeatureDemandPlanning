@using System.Data
@using enums = FeatureDemandPlanning.Model.Enumerations

@model FeatureDemandPlanning.Model.ViewModel.FdpOxoVolumeViewModel

<div class="panel panel-primary">
    <div class="panel-heading" style="height:50px">
        <div class="pull-left">
            @*<div class="panel-title">
                    Take Rate Data
                </div>*@
        </div>
        <div class="viewport-toolbar pull-left">

            <div class="btn-group">
                @Html.Partial("_ViewModeSelector", Model)
            </div>
            <div class="btn-group">
                @Html.Partial("_MarketSelector", Model)
            </div>
            <div class="input-group input-group-sm">
                <input class="form-control" style="top:1px" type="text" maxlength="10" placeholder="Filter" aria-describedby="filter-addon" />
            </div>
        </div>
        <div class="viewport-toolbar pull-right">
            <div class="btn-group">
                <button type="button" class="btn btn-default btn-sm" onclick="ToggleAllFolderWrapper();"><i class="glyphicon glyphicon-plus"></i> Toggle All</button>
                <button type="button" class="btn btn-default btn-sm" id="butChangeLog" onclick='changeLogWrapper();'><i class="glyphicon glyphicon-book"></i> Change Sets</button>
                <button type="button" class="btn btn-default btn-sm" id="butValidate" onclick='validateDoc();'><i class="glyphicon glyphicon-check"></i> Validate</button>
                <button type="button" class="btn btn-default btn-sm" id="btnMarketReview" onclick="marketReview"><i class="glyphicon glyphicon-flag"></i> Market Review</button>
                <button type="button" class="btn btn-default btn-sm" id="butPublish"><i class="glyphicon glyphicon-pushpin"></i> Publish</button>
                <button type="button" class="btn btn-default btn-sm" id="butSaveChange" onclick='showSaveChangeDialog();' style="display:none"><i class="glyphicon glyphicon-save"></i> Save Changes</button>
                <button type="button" class="btn btn-default btn-sm" id="butCancelChange" onclick='cancelOXODocument();' style="display:none"><i class="glyphicon glyphicon-remove"></i> Cancel Changes</button>
            </div>


            <div class="btn-group">
                <a class="btn btn-default btn-sm" role="button" data-toggle="collapse" href="#collapseExample" aria-expanded="true" aria-controls="collapseExample">
                    <span class="glyphicon glyphicon-collapse-down"></span>
                </a>
            </div>

        </div>


    </div>

    <div class="panel-body" style="padding:5px">
        <div class="col-xs-12">
            <table id="@(Model.IdentifierPrefix)_TakeRateData" class="table table-bordered table-condensed dataTable cross-tab">
                <thead>
                    <tr class="cross-tab-header">
                        <th colspan="3" class="text-right first-cell"></th>
                        @foreach (var availableModel in Model.Volume.Vehicle.AvailableModels)
                        {
                            var modelClassName = string.Empty;
                            if (availableModel.FdpModelId.HasValue)
                            {
                                modelClassName = "fdp-model";
                            }
                            <th class="text-center model @modelClassName" data="@availableModel.StringIdentifier">
                                @foreach (string namePart in availableModel.NameWithBR.Split('#'))
                                {
                                    @namePart<br />
                                }
                            </th>
                        }
                    </tr>
                    <tr class="cross-tab-header">
                        <th colspan="3" class="text-right bmc">BMC</th>
                        @foreach (var availableModel in Model.Volume.Vehicle.AvailableModels)
                        {
                            var modelClassName = string.Empty;
                            if (availableModel.FdpModelId.HasValue)
                            {
                                modelClassName = "fdp-model";
                            }
                            <th class="text-center bmc @modelClassName">
                                @if (!string.IsNullOrEmpty(availableModel.BMC))
                                {
                                    <span>@availableModel.BMC</span>
                                }
                                else
                                {
                                    <span>-</span>
                                }
                            </th>
                        }
                    </tr>
                    <tr class="cross-tab-header" style="height:25px">
                        <th colspan="3" class="text-right trim-level">Level</th>
                        @foreach (var availableModel in Model.Volume.Vehicle.AvailableModels)
                        {
                            var modelClassName = string.Empty;
                            if (availableModel.FdpModelId.HasValue)
                            {
                                modelClassName = "fdp-model";
                            }
                            <th class="text-center trim-level @modelClassName">
                                @if (!string.IsNullOrEmpty(availableModel.TrimLevel))
                                {
                                    <span>@availableModel.TrimLevel</span>
                                }
                                else
                                {
                                    <span>-</span>
                                }
                            </th>
                        }
                    </tr>
                    <tr class="cross-tab-header">
                        <th colspan="3" class="text-right dpck">DPCK</th>
                        @foreach (var availableModel in Model.Volume.Vehicle.AvailableModels)
                        {
                            var modelClassName = string.Empty;
                            if (availableModel.FdpModelId.HasValue)
                            {
                                modelClassName = "fdp-model";
                            }
                            <th class="text-center dpck @modelClassName">
                                @if (!string.IsNullOrEmpty(availableModel.DPCK))
                                {
                                    <span>@availableModel.DPCK</span>
                                }
                                else
                                {
                                    <span>-</span>
                                }
                            </th>
                        }
                    </tr>
                    <tr class="cross-tab-header">
                        <th class="cross-tab-data-item feature-description">Description</th>
                        <th class="cross-tab-data-item feature-code">Code</th>
                        <th class="text-right model-mix">
                            @if (Model.Volume.Mode == enums.TakeRateResultMode.PercentageTakeRate)
                            {
                                @:% Mix
                        }
                            else
                            {
                                @:Volume
                        }
                        </th>
                        @foreach (var availableModel in Model.Volume.Vehicle.AvailableModels)
                        {
                            var modelClassName = string.Empty;
                            if (availableModel.FdpModelId.HasValue)
                            {
                                modelClassName = "fdp-model";
                            }
                            if (Model.Volume.Mode == enums.TakeRateResultMode.PercentageTakeRate)
                            {
                                <th class="text-center model-mix @modelClassName">
                                    @{
                                var summary = Model.Volume.VolumeData.TakeRateSummaryByModel.Where(s => s.StringIdentifier == availableModel.StringIdentifier).FirstOrDefault();
                                var percentage = "-";
                                if (summary != null)
                                {
                                    percentage = string.Format("{0:P2}", summary.PercentageOfFilteredVolume);
                                }
                                @percentage
                                    }
                                </th>
                            }
                            else
                            {
                                <th class="text-center model-mix @modelClassName">
                                    @{
                                var summary = Model.Volume.VolumeData.TakeRateSummaryByModel.Where(s => s.StringIdentifier == availableModel.StringIdentifier).FirstOrDefault();
                                var volume = "-";
                                if (summary != null)
                                {
                                    volume = summary.Volume.ToString();
                                }
                                @volume
                                    }
                                </th>
                            }
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var featureRow in Model.Volume.VolumeData.RawData)
                    {
                        <tr data-target="@(featureRow.Field<string>("FeatureIdentifier"))" data-group="@(featureRow.Field<string>("FeatureGroup"))" data-subgroup="@(featureRow.Field<string>("FeatureSubGroup"))">
                            @{
                                var featureClassName = "";
                                var featureFixedClassName = "cross-tab-fixed";
                                var featureFixedLastClassName = "cross-tab-fixed-last";
                                if (featureRow.Field<string>("FeatureIdentifier").StartsWith("F"))
                                {
                                    featureClassName = "fdp-data-item";
                                    featureFixedClassName = "fdp-data-item-fixed";
                                    featureFixedLastClassName = "fdp-data-item-fixed-last";
                                }
                            }

                            <td class="cross-tab-data-item @featureFixedClassName @featureClassName">
                                <div class="pull-left">@(featureRow.Field<string>("BrandDescription"))</div>
                                @if (featureRow.Field<bool>("HasRule"))
                                {
                                    <div class="rule-item pull-right"><span class="glyphicon glyphicon-alert"></span>&nbsp;</div>
                                }
                                @if (!string.IsNullOrEmpty(featureRow.Field<string>("FeatureComment")))
                                {
                                    <div class="comment-item pull-right" data-toggle="popover" title="Comments" data-content="@(featureRow.Field<string>("FeatureComment"))"><span class="glyphicon glyphicon-pencil"></span>&nbsp;</div>
                                }


                            </td>
                            <td class="cross-tab-data-item @featureFixedClassName text-center @featureClassName">@(featureRow.Field<string>("FeatureCode"))</td>
                            <td class="cross-tab-data-item @featureFixedClassName @featureFixedLastClassName @featureClassName text-center">
                                @if (Model.Volume.Mode == enums.TakeRateResultMode.PercentageTakeRate)
                                {
                                    <span>@(string.Format("{0:P2}", featureRow.Field<decimal>("TotalPercentageTakeRate")))</span>
                                }
                                else
                                {
                                    <span>@(featureRow.Field<int>("TotalVolume"))</span>
                                }
                            </td>
                            @foreach (var availableModel in Model.Volume.Vehicle.AvailableModels)
                            {
                                var modelClassName = "";
                                if (featureRow.Field<string>("FeatureIdentifier").StartsWith("F") || availableModel.FdpModelId.HasValue)
                                {
                                    modelClassName = "fdp-data-item";
                                }
                                else
                                {
                                    modelClassName = "";
                                }
                                <td class="text-center cross-tab-data-item @modelClassName @RenderDataClass(availableModel.StringIdentifier, featureRow)">
                                    @RenderDataItem(availableModel.StringIdentifier, featureRow)
                                </td>
                            }
                        </tr>
                    }

                </tbody>

            </table>
        </div>
    </div>


</div>

@helper RenderDataItem(string modelIdentifier, DataRow dataItem)
{
    var rowIdentity = dataItem.Field<long?>("Id");
    var test = Model.Volume.VolumeData.FeatureApplicabilityData.Where(fa => fa.Field<long?>("Id") == rowIdentity);
    var featureApplicability =
        Model.Volume.VolumeData.FeatureApplicabilityData.Where(fa => fa.Field<long?>("Id") == rowIdentity)
        .Select(fa => fa.IsNull(modelIdentifier) ? string.Empty : fa.Field<string>(modelIdentifier))
        .FirstOrDefault();


    var parsedFeatureApplicability = featureApplicability
            .Replace("*", string.Empty)
            .Replace("(", string.Empty)
            .Replace(")", string.Empty);

    // If volume
    // 1. If no value and optional or standard (-)
    // 2. If no value and not applicable (N/A)
    // 3. If value render the value regardless of applicability

    // If percentage
    // 1. If no value and optional or standard (-)
    // 2. If no value and not applicable (N/A)
    // 3. If value render the value regardless of applicability

    if (Model.Volume.Mode == enums.TakeRateResultMode.PercentageTakeRate)
    {
        var value = dataItem.Field<decimal?>(modelIdentifier);
        if (value.GetValueOrDefault() == 0 && (parsedFeatureApplicability == "O" || parsedFeatureApplicability == "S" || parsedFeatureApplicability == "P"))
        {
            @:-
        }
        else if (value.GetValueOrDefault() == 0 && (string.IsNullOrEmpty(parsedFeatureApplicability) || parsedFeatureApplicability == "NA"))
        {
            @("N/A")
        }
        else
        {
            @value.Value.ToString("P2")
        }
    }
    else
    {
        var value = dataItem.Field<int?>(modelIdentifier);
        if (!value.HasValue && (parsedFeatureApplicability == "O" || parsedFeatureApplicability == "S" || parsedFeatureApplicability == "P"))
        {
            @:-
        }
        else if (value.GetValueOrDefault() == 0 && (string.IsNullOrEmpty(parsedFeatureApplicability) || parsedFeatureApplicability == "NA"))
        {
            @("N/A")
        }
        else
        {
            @value.Value.ToString("G")
        }
    }
}

@helper RenderDataClass(string modelIdentifier, DataRow dataItem)
{
    var rowIdentity = dataItem.Field<long?>("Id");
    var featureApplicability =
        Model.Volume.VolumeData.FeatureApplicabilityData.Where(fa => fa.Field<long?>("Id") == rowIdentity)
        .Select(fa => fa.IsNull(modelIdentifier) ? string.Empty : fa.Field<string>(modelIdentifier))
        .FirstOrDefault();

    if (string.IsNullOrEmpty(featureApplicability))
    {
        @("text-muted");
    }
    else
    {
        var parsedFeatureApplicability = featureApplicability
            .Replace("*", string.Empty)
            .Replace("(", string.Empty)
            .Replace(")", string.Empty);

        switch (parsedFeatureApplicability)
        {
            case "O":
                @("optionalFeature");
                break;
            case "S":
            @("standardFeature");
            break;
            case "P":
            @("packFeature");
            break;
            case "NA":
            @("text-muted");
            break;
            default:
            @("text-muted");
            break;
        }
    }

}