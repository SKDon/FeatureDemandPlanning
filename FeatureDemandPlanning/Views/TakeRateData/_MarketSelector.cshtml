@using FeatureDemandPlanning.Model
@using FeatureDemandPlanning.Model.Empty
@using enums = FeatureDemandPlanning.Model.Enumerations

@model FeatureDemandPlanning.Model.ViewModel.TakeRateViewModel
@{
    var totalDerivatives = Model.Document.TotalDerivatives;
}

<div class="btn-group" role="group" aria-label="Market Selector">

    <!-- Single button -->
    <button id="btnMarket" type="button" class="btn btn-default btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <span class="validation-error primary-validation-error glyphicon glyphicon-alert" data-target="" style="display: none"></span>&nbsp;
        @if (!(Model.Document.Market is EmptyMarket))
        {
            var variantCount = 0;
            foreach (var marketGroup in Model.Document.Vehicle.AvailableMarketGroups)
            {
                foreach (var market in marketGroup.Markets)
                {
                    if (market.Id != Model.Document.Market.Id)
                    {
                        continue;
                    }
                    variantCount = market.VariantCount;
                    break;
                }
                if (variantCount > 0)
                {
                    break;
                }
            }
            @:@Model.Document.Market.Name (@variantCount Model Variants)
        }
        else
        {
            @:All Markets (@totalDerivatives Model Variants)
        }
        <span class="caret"></span>
    </button>
    <ul class="dropdown-menu">
        @{
            var allMarketsLink = string.Format("All Markets ({0})", totalDerivatives);
        }
        <li class="dropdown-nosubmenu">@Html.ActionLink(allMarketsLink, "Index", new {takeRateId = Model.Document.TakeRateId, resultsMode = Model.Document.Mode}, new {data_target = "ALL"})</li>
        @if (Model.Document.TakeRateData.HasData)
        {
            <li class="dropdown-header">Market Groups</li>
            foreach (var marketGroup in Model.Document.Vehicle.AvailableMarketGroups)
            {
                var selectedGroup = string.Empty;
                if (!(Model.Document.MarketGroup is EmptyMarketGroup) && marketGroup.Id == Model.Document.MarketGroup.Id)
                {
                    selectedGroup = "selected";
                }
                if (marketGroup.VariantCount > 0)
                {
                    <li class="dropdown-submenu @selectedGroup">
                        @RenderUrlForMarketGroup(marketGroup)
                        <ul class="dropdown-menu scrollable-menu">
                            @{
                                var markets = marketGroup.Markets.OrderBy(p => p.SubRegionOrder);
                                var prevSubRegion = string.Empty;
                            }
                            @foreach (var market in markets)
                            {
                                var selectedMarket = string.Empty;
                                if (!(Model.Document.Market is EmptyMarket) && market.Id == Model.Document.Market.Id)
                                {
                                    selectedMarket = "selected";
                                }
                                if (prevSubRegion != market.SubRegion)
                                {
                                    prevSubRegion = market.SubRegion;
                                    <li class="dropdown-header">@market.SubRegion</li>
                                }
                                if (market.VariantCount > 0)
                                {
                                    <li class="@selectedMarket">@RenderUrlForMarket(market)</li>
                                }
                                else
                                {
                                    <li><span class="validation-error market-validation-error glyphicon glyphicon-alert" data-target="@market.Id" style="display: none"></span><span>@market.Name</span></li>
                                }
                            }

                        </ul>
                    </li>
                }
                else
                {
                    <li>
                        <span>@marketGroup.GroupName</span>
                    </li>
                }
            }
        }
    </ul>
</div>

@helper RenderUrlForMarketGroup(MarketGroup marketGroup)
{
    var groupName = string.Format("{0} ({1})", marketGroup.GroupName, marketGroup.VariantCount);
    <span>@groupName</span>
    @*@Html.ActionLink(groupName, "Index", new { takeRateId = Model.Document.TakeRateId, marketGroupId = marketGroup.Id, resultsMode = Model.Document.Mode },
                    new { data_target = string.Format("MG|{0}", marketGroup.Id) });*@
}

@helper RenderUrlForMarket(Market market)
{
    var marketName = string.Format("{0} ({1})", market.Name, market.VariantCount);
    if (Model.Document.Mode == enums.TakeRateResultMode.Raw)
    {
        @Html.RouteLink(marketName, "TakeRateDataByMarketRaw",
            new {takeRateId = Model.Document.TakeRateId, marketId = market.Id },
            new {data_target = string.Format("M|{0}", market.Id)})
    }
    else
    {
        @Html.RouteLink(marketName, "TakeRateDataByMarket",
            new { takeRateId = Model.Document.TakeRateId, marketId = market.Id },
            new { data_target = string.Format("M|{0}", market.Id) })
    }
}
