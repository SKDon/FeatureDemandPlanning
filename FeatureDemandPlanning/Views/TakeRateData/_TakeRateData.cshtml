@using System.Data
@using FeatureDemandPlanning.Model.Empty
@using enums = FeatureDemandPlanning.Model.Enumerations

@model FeatureDemandPlanning.Model.ViewModel.TakeRateViewModel

@{
    var modelCount = Model.Document.Vehicle.AvailableModels.Count();
    var numberToPad = 0;

    if ((Model.Document.PageSize != -1 && Model.Document.PageSize != int.MaxValue && modelCount < Model.Document.PageSize) || modelCount < 10)
    {
        numberToPad = 10 - modelCount;
    }
}
<div class="col-xs-12" style="padding: 0;">

    <table id="@(Model.IdentifierPrefix)_TakeRateData" class="table table-bordered table-condensed dataTable cross-tab">
        <thead>
            <tr class="cross-tab-header">
                <th colspan="4" class="text-center first-cell">

                    @if (!Model.TakeRate.Publish.IsPublished)
                    {
                        switch (Model.MarketReviewStatus)
                        {
                            case enums.MarketReviewStatus.NotSet:
                                break;
                            case enums.MarketReviewStatus.AwaitingReview:
                                <div>
                                    <span class="glyphicon glyphicon-flag"></span> Awaiting Market Review
                                </div>
                                break;
                            case enums.MarketReviewStatus.AwaitingApproval:
                                <div>
                                    <span class="glyphicon glyphicon-flag"></span> Market Review Awaiting Approval
                                </div>
                                break;
                            case enums.MarketReviewStatus.Rejected:
                                <div>
                                    <span class="glyphicon glyphicon-flag"></span> Market Review Rejected
                                </div>
                                break;
                            case enums.MarketReviewStatus.Approved:
                                <div>
                                    <span class="glyphicon glyphicon-flag"></span> Market Review Approved
                                </div>
                                break;
                            case enums.MarketReviewStatus.Recalled:
                                <div>
                                    <span class="glyphicon glyphicon-flag"></span> Market Review Recalled
                                </div>
                                break;
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                    }
                    else
                    {
                        <div>
                            <span class="glyphicon glyphicon-pushpin"></span> Published
                        </div>
                    }

                </th>
                @foreach (var availableModel in Model.Document.Vehicle.AvailableModels)
                {
                    var modelClassName = string.Empty;
                    if (availableModel.FdpModelId.HasValue)
                    {
                        modelClassName = "fdp-model";
                    }
                    <th class="text-center model @modelClassName" data="@availableModel.StringIdentifier" data-target="MS|z@Model.Document.Market.Id|@availableModel.StringIdentifier" data-model="@availableModel.StringIdentifier">
                        <div class="glyphicon glyphicon-alert validation-error model-validation-error"
                             style="display: none"
                             data-content=""></div>

                        @{
                    var model = availableModel;
                    var notes = Model.Document.TakeRateData.NoteAvailability.Where(n => string.IsNullOrEmpty(n.FeatureIdentifier) && n.ModelIdentifier == model.StringIdentifier).ToList();
                    if (notes.Any())
                    {
                        <div class="indicator comment-item" role="button" data-toggle="popover" title="Notes" data-content="Notes have been added for this item. Click &quot;View Model Details...&quot; for additional information">
                            <div class="triangle"></div>
                        </div>
                    }
                    if (notes.Any())
                    {
                        <div class="indicator comment-item" role="button" data-toggle="popover" title="Notes" data-target="N|@Model.Document.Market.Id|@availableModel.StringIdentifier|" data-content="Notes have been added for this item. Click &quot;View Model Details...&quot; for additional information">
                            <div class="triangle"></div>
                        </div>
                    }
                    else
                    {
                        <div class="indicator comment-item" style="display:none" role="button" data-target="C|@Model.Document.Market.Id|@availableModel.StringIdentifier|" data-toggle="popover" title="Notes" data-content="Notes have been added for this item. Click &quot;View Model Details...&quot; for additional information">
                            <div class="triangle"></div>
                        </div>
                    }
                        }
                        <a href="@Url.RouteUrl("TakeRateDataByMarket", new
                                 {
                                     Model.Document.TakeRateId,
                                     marketId = Model.Document.Market.Id,
                                     availableModel.DPCK
                                 })">@foreach (string namePart in availableModel.NameWithBR.Split('#'))
                                 {
                                    @namePart<br />
                                 }</a>
                        
                    </th>
                }
                @for (var i = 0; i < numberToPad; i++)
                {
                    <th class="model"></th>
                }
            </tr>
            <tr class="cross-tab-header" style="height: 27px;">
                <th colspan="4" class="text-right bmc">@Html.RouteLink("BMC", "TakeRateDataByMarket", new
                                  {
                                      Model.Document.TakeRateId,
                                      marketId = Model.Document.Market.Id
                                  })</th>
                @foreach (var availableModel in Model.Document.Vehicle.AvailableModels)
                {
                    var modelClassName = string.Empty;
                    if (availableModel.FdpModelId.HasValue)
                    {
                        modelClassName = "fdp-model";
                    }
                    <th class="text-center bmc @modelClassName" data-model="@availableModel.StringIdentifier">
                        @if (!string.IsNullOrEmpty(availableModel.BMC))
                        {
                            <span>@Html.RouteLink(availableModel.BMC, "TakeRateDataByMarket", new
                                  {
                                      Model.Document.TakeRateId,
                                      marketId = Model.Document.Market.Id,
                                      availableModel.BMC
                                  })</span>
                        }
                        else
                        {
                            <span>-</span>
                        }
                    </th>
                }
                @for (var i = 0; i < numberToPad; i++)
                {
                    <th class="model"></th>
                }
            </tr>
            @*<tr class="cross-tab-header">
                    <th colspan="4" class="text-right trim-level">Trim Level / DPCK</th>
                    @foreach (var availableModel in Model.Document.Vehicle.AvailableModels)
                    {
                        var modelClassName = string.Empty;
                        if (availableModel.FdpModelId.HasValue)
                        {
                            modelClassName = "fdp-model";
                        }
                        <th class="text-center trim-level @modelClassName" data-model="@availableModel.StringIdentifier">
                            @if (!string.IsNullOrEmpty(availableModel.TrimLevel))
                            {
                                <span>
                                    @availableModel.TrimLevel
                                </span>
                                if (!string.IsNullOrEmpty(availableModel.DPCK))
                                {
                                    <span>&nbsp;/ @availableModel.DPCK</span>
                                }
                            }
                            else
                            {
                                <span>-</span>
                            }
                        </th>
                    }
                </tr>*@
            <tr class="cross-tab-header" id="@(Model.IdentifierPrefix)_TakeRateByModel">
                @{ Html.RenderPartial("_TakeRateDataByModel"); }
            </tr>
        </thead>
        <tbody id="@(Model.IdentifierPrefix)_TakeRateByFeature">
            @foreach (var featureRow in Model.Document.TakeRateData.RawData)
            {
                TempData["CurrentRow"] = featureRow;
                Html.RenderPartial("_TakeRateDataByFeature");
            }
        </tbody>

    </table>
</div>
@*</div>*@



<input type="hidden" id="@(Model.IdentifierPrefix)_OriginalVolumeByMarket" value="@Model.Document.TakeRateData.FilteredVolume" />
<input type="hidden" id="@(Model.IdentifierPrefix)_OriginalTakeRateByMarket" value="@Model.Document.TakeRateData.PercentageOfTotalVolume"/>
<input type="hidden" id="@(Model.IdentifierPrefix)_Published" value="@(Model.TakeRate.Publish.IsPublished ? 1 : 0)" />
