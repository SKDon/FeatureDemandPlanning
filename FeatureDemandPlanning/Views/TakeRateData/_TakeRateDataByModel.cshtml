@using enums = FeatureDemandPlanning.Model.Enumerations

@model FeatureDemandPlanning.Model.ViewModel.TakeRateViewModel

<th class="cross-tab-data-item feature-description">Description</th>
<th class="cross-tab-data-item feature-notes">Notes</th>
<th class="cross-tab-data-item feature-code">Code</th>
<th class="text-right model-mix">
    @if (Model.Document.Mode == enums.TakeRateResultMode.PercentageTakeRate)
    {
        @:% Mix
    }
    else
    {
        @:Volume
    }
</th>
@foreach (var availableModel in Model.Document.Vehicle.AvailableModels)
{
    var modelClassName = string.Empty;
    if (availableModel.FdpModelId.HasValue)
    {
        modelClassName = "fdp-model";
    }
    if (Model.Document.Mode == enums.TakeRateResultMode.PercentageTakeRate)
    {
        <th class="text-center model-mix @RenderEditableClass() @modelClassName" data-target="MS|@Model.Document.Market.Id|@availableModel.StringIdentifier">
            @{
        var summary = Model.Document.TakeRateData.TakeRateSummaryByModel.FirstOrDefault(s => s.StringIdentifier == availableModel.StringIdentifier);
        var percentage = "-";
        if (summary != null)
        {
            percentage = string.Format("{0:P2}", summary.PercentageOfFilteredVolume);
        }
        @percentage
            }

            @{
                var model = availableModel;
                var notes = Model.Document.TakeRateData.NoteAvailability.Where(n => string.IsNullOrEmpty(n.FeatureIdentifier) && n.ModelIdentifier == model.StringIdentifier);
                if (notes.Any())
                {
                    <div class="indicator comment-item" role="button" data-toggle="popover" title="Notes" data-content="Notes have been added for this item. Click &quot;View Model Details...&quot; for additional information">
                        <div class="triangle"></div>
                    </div>
                }
                else
                {
                    <div class="triangle" style="display: none"></div>
                }
            }
        </th>
    }
    else
    {
        <th class="text-center model-mix @RenderEditableClass() @modelClassName" data-target="MS|@Model.Document.Market.Id|@availableModel.StringIdentifier">
            @{
                var summary = Model.Document.TakeRateData.TakeRateSummaryByModel.FirstOrDefault(s => s.StringIdentifier == availableModel.StringIdentifier);
                var volume = "-";
                if (summary != null)
                {
                    volume = summary.Volume.ToString();
                }
                @volume
            }

            @{
                var model = availableModel;
                var notes = Model.Document.TakeRateData.NoteAvailability.Where(n => string.IsNullOrEmpty(n.FeatureIdentifier) && n.ModelIdentifier == model.StringIdentifier);
                if (notes.Any())
                {
                    <div class="indicator comment-item" role="button" data-toggle="popover" title="Notes" data-content="Notes have been added for this item. Click &quot;View Model Details...&quot; for additional information">
                        <div class="triangle"></div>
                    </div>
                }
                else
                {
                    <div class="triangle" style="display: none"></div>
                }
            }
        </th>
    }
}

@helper RenderEditableClass()
{
    if (!(Model.Document.Market is FeatureDemandPlanning.Model.Empty.EmptyMarket) && Model.AllowEdit)
    {
        @("editable-header")
    }
    else
    {
        @(string.Empty)
    }
}
