@using System.Data
@using System.Text
@using FeatureDemandPlanning.Helpers
@using FeatureDemandPlanning.Model.Empty
@using enums = FeatureDemandPlanning.Model.Enumerations

@model FeatureDemandPlanning.Model.ViewModel.TakeRateViewModel

@{
    var featureRow = (DataRow)TempData["CurrentRow"];
    var featureIdentifier = featureRow.Field<string>("FeatureIdentifier");
    var featurePackId = featureRow.Field<int?>("FeaturePackId");
    var marketIdentifier = Model.Document.Market.Id;
}

<tr data-target="@marketIdentifier|@featureIdentifier" data-group="@(featureRow.Field<string>("FeatureGroup"))" data-subgroup="@(featureRow.Field<string>("FeatureSubGroup"))">
    @{
        var featureClassName = "";
        var featureFixedClassName = "cross-tab-fixed";
        var featureFixedLastClassName = "cross-tab-fixed-last";

        var isOrphanedData = featureRow.Field<bool>("IsOrphanedData");
        var isIgnoredFeature = featureRow.Field<bool>("IsIgnoredData");
        if (isOrphanedData)
        {
            featureClassName = "orphaned-data-item";
            featureFixedClassName = "orphaned-data-item-fixed";
            featureFixedLastClassName = "orphaned-data-item-fixed-last";
        }

        if (isIgnoredFeature)
        {
            featureClassName = "orphaned-data-item";
            featureFixedClassName = "orphaned-data-item-fixed";
            featureFixedLastClassName = "orphaned-data-item-fixed-last";
        }
    }

    <td class="cross-tab-data-item @featureFixedClassName @featureClassName" data-feature="@featureIdentifier">
        @{
            var featureNotes = Model.Document.TakeRateData.NoteAvailability.Where(n => n.FeatureIdentifier == featureIdentifier && !n.ModelId.HasValue);
            if (featureNotes.Any())
            {
                <div class="indicator comment-item pull-right" role="button" data-target="N|@marketIdentifier|@featureIdentifier" data-toggle="popover" title="Notes" data-content="Notes have been added for this item. Click &quot;View Details...&quot for additional information"><div class="triangle2"></div></div>
            }
            else
            {
                <div class="indicator comment-item pull-right" style="display:none" role="button" data-target="N|@marketIdentifier|@featureIdentifier" data-toggle="popover" title="Notes" data-content="Notes have been added for this item. Click &quot;View Details...&quot for additional information"><div class="triangle2"></div></div>
            }
        }
        @(featureRow.Field<string>("BrandDescription"))
        <div style="display: none">@(featureRow.Field<string>("ExclusiveFeatureGroup"))</div>
        @if (!featureIdentifier.StartsWith("P"))
        {
            // If this is not a pack feature, render a hidden list of packs that contain the feature 
            // This allows us to click on a feature pack and filter the available features to show the features in that pack 
            <div style="display: none">@RenderPackList(featureIdentifier)</div>
        }
        else
        {
            // If this is a feature pack, render a hidden pack identifier
            // When clicking on a pack heading in the list of feature packs containing that feature, we can filter to just that pack
            <div style="display: none">P@(featurePackId)</div>
        }
    </td>
    <td class="cross-tab-data-item @featureFixedClassName text-center @featureClassName feature-notes" data-feature="@featureIdentifier">
        <div class="changed-indicator pull-right" style="display: none" title="Changes have been made to the take rate / volume data for this feature">
            <span class="glyphicon glyphicon-wrench"></span>
        </div>

        @if (featureRow.Field<bool>("IsMappedToMultipleImportFeatures"))
        {
            <div class="indicator rule-item pull-right" data-toggle="popover" title="Feature Mapping" data-content="@RenderMultiMapping(featureRow.Field<string>("FeatureCode"))">
                <span class="glyphicon glyphicon-random"></span>&nbsp;
            </div>
        }
        
        @if (!string.IsNullOrEmpty(featureRow.Field<string>("FeatureRuleText")))
        {
            <div class="indicator rule-item pull-right" data-toggle="popover" title="Rules" data-content="@(featureRow.Field<string>("FeatureRuleText"))">
                <span class="glyphicon glyphicon-list-alt"></span>&nbsp;
            </div>
        }
        @if (!string.IsNullOrEmpty(featureRow.Field<string>("FeatureComment")))
        {
            <div class="indicator comment-item pull-right" data-toggle="popover" title="Comments" data-content="@(featureRow.Field<string>("FeatureComment"))">
                <span class="glyphicon glyphicon-comment"></span>&nbsp;
            </div>
        }
        @if (!string.IsNullOrEmpty(featureRow.Field<string>("ExclusiveFeatureGroup")))
        {
            <div class="indicator efg-item pull-right" data-filter="@(featureRow.Field<string>("ExclusiveFeatureGroup"))" data-toggle="popover" title="Exclusive Feature Group: @(featureRow.Field<string>("ExclusiveFeatureGroup"))" data-content="@RenderExclusiveFeatureGroup(featureRow.Field<string>("ExclusiveFeatureGroup"))">
                <span class="glyphicon glyphicon-link"></span>&nbsp;
            </div>
        }
        @if (featurePackId.HasValue && !featureIdentifier.StartsWith("P"))
        {
            <div class="indicator feature-pack-item pull-right" data-toggle="popover"
                 title="Feature Packs" data-content="@RenderPacks(featureIdentifier)">
                <span class="glyphicon glyphicon-duplicate"></span>&nbsp;
            </div>
        }
        @if (featurePackId.HasValue && featureIdentifier.StartsWith("P"))
        {
            <div class="indicator pack-item pull-right" data-filter="P@(featurePackId)" data-toggle="popover" data-trigger="focus"
                 data-content="@RenderPack(featurePackId.Value)">
                <span class="glyphicon glyphicon-duplicate"></span>&nbsp;
            </div>
        }
    </td>
    <td class="cross-tab-data-item @featureFixedClassName text-center @featureClassName feature-code" data-feature="@featureIdentifier">@(featureRow.Field<string>("FeatureCode"))</td>
    <td class="cross-tab-data-item @featureFixedClassName @featureFixedLastClassName @featureClassName text-center feature-mix" data-feature="@featureIdentifier">
        @if (Model.Document.Mode == enums.TakeRateResultMode.PercentageTakeRate)
        {
            <span data-target="FS|@marketIdentifier|@featureIdentifier">@(string.Format("{0:P2}", featureRow.Field<decimal>("TotalPercentageTakeRate")))</span>
        }
        else
        {
            <span data-target="FS|@marketIdentifier|@featureIdentifier">@(featureRow.Field<int>("TotalVolume"))</span>
        }
    </td>
    @foreach (var availableModel in Model.Document.Vehicle.AvailableModels)
    {
        var modelClassName = "";
        var modelIdentifier = availableModel.StringIdentifier;
        if (featureIdentifier.StartsWith("F") || availableModel.FdpModelId.HasValue)
        {
            modelClassName = "fdp-data-item";
        }
        else
        {
            modelClassName = "";
        }
        <td class="text-center cross-tab-data-item  @modelClassName @RenderDataClass(modelIdentifier, featureRow)" data-feature="@featureIdentifier" data-model="@modelIdentifier">
            <div class="@RenderEditableClass(modelIdentifier, featureRow)" data-target="@marketIdentifier|@modelIdentifier|@featureIdentifier">
                @RenderDataItem(availableModel.StringIdentifier, featureRow)
            </div>

            <div class="glyphicon glyphicon-alert validation-error feature-validation-error" style="display:none" data-content=""></div>
            @{
        var notes = Model.Document.TakeRateData.NoteAvailability.Where(n => n.FeatureIdentifier == featureIdentifier && n.ModelIdentifier == modelIdentifier);
        if (notes.Any())
        {
            <div class="indicator comment-item" role="button" data-target="N|@marketIdentifier|@modelIdentifier|@featureIdentifier" data-toggle="popover" title="Notes" data-content="Notes have been added for this item. Click &quot;View Details...&quot for additional information"><div class="triangle"></div></div>
        }
        else
        {
            <div class="indicator comment-item" style="display:none" role="button" data-target="N|@marketIdentifier|@modelIdentifier|@featureIdentifier" data-toggle="popover" title="Notes" data-content="Notes have been added for this item. Click &quot;View Details...&quot for additional information"><div class="triangle"></div></div>
            <div class="triangle" style="display:none"></div>
        }
            }

        </td>
    }
    @{
        var modelCount = Model.Document.Vehicle.AvailableModels.Count();
        var numberToPad = 0;

        if ((Model.Document.PageSize != -1 && Model.Document.PageSize != int.MaxValue && modelCount < Model.Document.PageSize) || modelCount < 10)
        {
            numberToPad = 10 - modelCount;
        }
    }
    @for (var i = 0;
        i < numberToPad;
        i++)
    {
        <td class="cross-tab-data-item orphaned-data-item"></td>
    }
</tr>

@helper RenderDataItem(string modelIdentifier, DataRow dataItem)
{
    var rowIdentity = dataItem.Field<long?>("Id");
    var featureIdentifier = dataItem.Field<string>("FeatureIdentifier");
    var featureApplicability =
        Model.Document.TakeRateData.FeatureApplicabilityData.Where(fa => fa.Field<long?>("Id") == rowIdentity)
        .Select(fa => fa.IsNull(modelIdentifier) ? string.Empty : fa.Field<string>(modelIdentifier))
        .FirstOrDefault();


    var parsedFeatureApplicability = OxoHelper.ParseFeatureApplicability(featureApplicability);
        
    // If volume
    // 1. If no value and optional or standard (-)
    // 2. If no value and not applicable (N/A)
    // 3. If value render the value regardless of applicability
    // 4. If no coded applicability and no value (-)

    // If percentage
    // 1. If no value and optional or standard (-)
    // 2. If no value and not applicable (N/A)
    // 3. If value render the value regardless of applicability
    // 4. If no coded applicability and no value (-)

    var dataText = "-";

    if (Model.Document.Mode == enums.TakeRateResultMode.PercentageTakeRate)
    {
        var value = dataItem.Field<decimal?>(modelIdentifier);
        if (value.GetValueOrDefault() == 0 && (parsedFeatureApplicability == "NA" || string.IsNullOrEmpty(parsedFeatureApplicability)) && (featureIdentifier.StartsWith("O") || featureIdentifier.StartsWith("P")))
        {
            dataText = "-";
        }
        else if (value.HasValue)
        {
            dataText = value.Value.ToString("P2");
        }
    }
    else
    {
        var value = dataItem.Field<int?>(modelIdentifier);
        if (value.GetValueOrDefault() == 0 && (parsedFeatureApplicability == "NA" || string.IsNullOrEmpty(parsedFeatureApplicability)) && (featureIdentifier.StartsWith("O") || featureIdentifier.StartsWith("P")))
        {
            dataText = "-";
        }
        else if (value.HasValue)
        {
            dataText = value.Value.ToString("G");
        }
    }

    @dataText
}

@helper RenderEditableClass(string modelIdentifier, DataRow dataItem)
{
    var rowIdentity = dataItem.Field<long?>("Id");
    var featureApplicability =
        Model.Document.TakeRateData.FeatureApplicabilityData.Where(fa => fa.Field<long?>("Id") == rowIdentity)
        .Select(fa => fa.IsNull(modelIdentifier) ? string.Empty : fa.Field<string>(modelIdentifier))
        .FirstOrDefault();

    var parsedFeatureApplicability = OxoHelper.ParseFeatureApplicability(featureApplicability);
    var isUncodedFeature = false;
    var featureCode = dataItem.Field<string>("FeatureCode");
    isUncodedFeature = featureCode.ToUpper().StartsWith("UNC");

    // Standard and non-applicable features cannot be edited. 
    //They are either zero or set to 100% or set as a combination of options in an exclusive feature group.
    // In addition, pack only features can now only be edited by changing the pack itself.
    if (!(Model.Document.Market is FeatureDemandPlanning.Model.Empty.EmptyMarket) && 
        Model.AllowEdit &&
        ( 
            (parsedFeatureApplicability != "NA" && parsedFeatureApplicability != "S" && parsedFeatureApplicability != "P" ) ||
            isUncodedFeature
        ))
    {
        @("editable")
    }
    else
    {
        @(string.Empty)
    }
}

@helper RenderExclusiveFeatureGroup(string efg)
{
    var featuresInGroup = Model.Document.TakeRateData.ExclusiveFeatureGroups.Where(g => g.Name.Equals(efg));
        //.OrderBy(g => g.Feature);
    var sb = new StringBuilder();
    foreach (var featureInGroup in featuresInGroup)
    {
        sb.Append(string.Format("{0} ({1})", featureInGroup.Feature, featureInGroup.FeatureCode));
        sb.Append("<br/>");
    }
    @sb.ToString();
}

@helper RenderMultiMapping(string featureCode)
{
    var mappedFeatures = Model.Document.TakeRateData.MultiMappedFeatureGroups.Where(f => f.FeatureCode.Equals(featureCode, StringComparison.OrdinalIgnoreCase));
    var sb = new StringBuilder();
    foreach (var mappedFeature in mappedFeatures)
    {
        sb.Append(string.Format("{0} ({1})", mappedFeature.Description, mappedFeature.ImportFeatureCode));
        sb.Append("<br/>");
    }
    @sb.ToString();
}

@helper RenderPacks(string featureIdentifier)
{
    var sb = new StringBuilder();

    if (featureIdentifier.StartsWith("O"))
    {
        var featureId = 0;
        int.TryParse(featureIdentifier.Substring(1), out featureId);

        var matchingPacks = Model.Document.TakeRateData.PackFeatures
            .Where(pf => pf.Id == featureId)
            .Select(pf => pf.PackId).Distinct();
        
        var packsContainingFeature =
            from packFeature in Model.Document.TakeRateData.PackFeatures
            where matchingPacks.Contains(packFeature.PackId)
            group new
            {
                packFeature.PackId,
                packFeature.PackName,
                packFeature.BrandDescription
            }
            by packFeature.PackId
            into packGroup
            select packGroup;

        foreach (var packContainingFeature in packsContainingFeature)
        {
            var pack = packContainingFeature.First();
            sb.Append("<strong class='feature-pack-item-header' data-filter='P" + pack.PackId + "'>" + pack.PackName + "</strong>");
            sb.Append("<br/>");
            foreach (var packFeature in packContainingFeature)
            {
                sb.Append(packFeature.BrandDescription);
                sb.Append("<br/>");
            }
            sb.Append("<br/>");
        }
    }
    @sb.ToString();
}

@helper RenderPack(int packId)
{
    var sb = new StringBuilder();

    var packFeatures = Model.Document.TakeRateData.PackFeatures
        .Where(pf => pf.PackId == packId)
        .Select(pf => pf.BrandDescription).Distinct();

    foreach (var packFeature in packFeatures)
    {
        sb.Append(packFeature);
        sb.Append("<br/>");
    }
    @sb.ToString();
}

@helper RenderPackList(string featureIdentifier)
{
    var sb = new StringBuilder();

    if (featureIdentifier.StartsWith("O"))
    {
        var featureId = 0;
        int.TryParse(featureIdentifier.Substring(1), out featureId);

        var matchingPacks = Model.Document.TakeRateData.PackFeatures
            .Where(pf => pf.Id == featureId)
            .Select(pf => "P" + pf.PackId).Distinct();

        sb.Append(string.Join(",", matchingPacks));
    }
    @sb.ToString();
}

@helper RenderDataClass(string modelIdentifier, DataRow dataItem)
{
    // If we are viewing all markets, the feature applicability does not apply
    // Therefore do not colour code the cells
    if (Model.Document.Market is EmptyMarket)
    {
        @("");
        return;
    }
    var rowIdentity = dataItem.Field<long?>("Id");
    var featureApplicability =
        Model.Document.TakeRateData.FeatureApplicabilityData.Where(fa => fa.Field<long?>("Id") == rowIdentity)
        .Select(fa => fa.IsNull(modelIdentifier) ? string.Empty : fa.Field<string>(modelIdentifier))
        .FirstOrDefault();
    var isOrphanedData = dataItem.Field<bool>("IsOrphanedData");

    if (isOrphanedData)
    {
        @("orphanedFeature")
        return;
    }

    if (string.IsNullOrEmpty(featureApplicability))
    {
        @("text-muted");
    }
    else
    {
        var parsedFeatureApplicability = featureApplicability
            .Replace("*", string.Empty)
            .Replace("(", string.Empty)
            .Replace(")", string.Empty)
            .Replace("1-", string.Empty)
            .Replace("2-", string.Empty)
            .Replace("3-", string.Empty);

        switch (parsedFeatureApplicability)
        {
            case "O":
                @("optionalFeature");
                break;
            case "S":
            @("standardFeature");
            break;
            case "P":
            @("packFeature");
            break;
            case "NA":
            @("text-muted");
            break;
            default:
            @("text-muted");
            break;
        }
    }

}
