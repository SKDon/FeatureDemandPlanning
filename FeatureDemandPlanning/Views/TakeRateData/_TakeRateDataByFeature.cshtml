@using System.Data
@using System.Text
@using enums = FeatureDemandPlanning.Model.Enumerations

@model FeatureDemandPlanning.Model.ViewModel.TakeRateViewModel

@{
    var featureRow = (DataRow)TempData["CurrentRow"];
    var featureIdentifier = featureRow.Field<string>("FeatureIdentifier");
    var marketIdentifier = Model.Document.Market.Id;
}

<tr data-target="@marketIdentifier|@featureIdentifier" data-group="@(featureRow.Field<string>("FeatureGroup"))" data-subgroup="@(featureRow.Field<string>("FeatureSubGroup"))">
    @{
        var featureClassName = "";
        var featureFixedClassName = "cross-tab-fixed";
        var featureFixedLastClassName = "cross-tab-fixed-last";
        if (featureRow.Field<string>("FeatureIdentifier").StartsWith("F"))
        {
            featureClassName = "fdp-data-item";
            featureFixedClassName = "fdp-data-item-fixed";
            featureFixedLastClassName = "fdp-data-item-fixed-last";
        }
    }

    <td class="cross-tab-data-item @featureFixedClassName @featureClassName" data-feature="@featureIdentifier">
        @(featureRow.Field<string>("BrandDescription"))
        <div style="display:none">@(featureRow.Field<string>("ExclusiveFeatureGroup"))</div>
    </td>
    <td class="cross-tab-data-item @featureFixedClassName text-center @featureClassName feature-notes" data-feature="@featureIdentifier">
        <div class="changed-indicator pull-right" style="display: none" title="Changes have been made to the take rate / volume data for this feature">
            <span class="glyphicon glyphicon-wrench"></span>
        </div>

        @if (!string.IsNullOrEmpty(featureRow.Field<string>("FeatureRuleText")))
        {
            <div class="indicator rule-item pull-right" data-toggle="popover" title="Rules" data-content="@(featureRow.Field<string>("FeatureRuleText"))">
                <span class="glyphicon glyphicon-list-alt"></span>&nbsp;
            </div>
        }
        @if (!string.IsNullOrEmpty(featureRow.Field<string>("FeatureComment")))
        {
            <div class="indicator comment-item pull-right" data-toggle="popover" title="Comments" data-content="@(featureRow.Field<string>("FeatureComment"))">
                <span class="glyphicon glyphicon-comment"></span>&nbsp;
            </div>
        }
        @if (!string.IsNullOrEmpty(featureRow.Field<string>("ExclusiveFeatureGroup")))
        {
            <div class="indicator efg-item pull-right" data-filter="@(featureRow.Field<string>("ExclusiveFeatureGroup"))" data-toggle="popover" title="Exclusive Feature Group: @(featureRow.Field<string>("ExclusiveFeatureGroup"))" data-content="@RenderExclusiveFeatureGroup(featureRow.Field<string>("ExclusiveFeatureGroup"))">
                <span class="glyphicon glyphicon-link"></span>&nbsp;
            </div>
        }
        @if (featureRow.Field<int?>("FeaturePackId").HasValue)
        {
            <div class="indicator pack-item pull-right" data-toggle="popover"
                 data-filter="@Model.Document.TakeRateData.PackFeatures.FirstOrDefault(p => p.PackId == featureRow.Field<int?>("FeaturePackId").GetValueOrDefault()).PackName"
                 title="Feature Pack: @Model.Document.TakeRateData.PackFeatures.FirstOrDefault(p => p.PackId == featureRow.Field<int?>("FeaturePackId").GetValueOrDefault()).PackName" data-content="@RenderPack(featureRow.Field<int?>("FeaturePackId").GetValueOrDefault())">
                <span class="glyphicon glyphicon-duplicate"></span>&nbsp;
            </div>
        }
    </td>
    <td class="cross-tab-data-item @featureFixedClassName text-center @featureClassName feature-code" data-feature="@featureIdentifier">@(featureRow.Field<string>("FeatureCode"))</td>
    <td class="cross-tab-data-item @featureFixedClassName @featureFixedLastClassName @featureClassName text-center feature-mix" data-feature="@featureIdentifier">
        @if (Model.Document.Mode == enums.TakeRateResultMode.PercentageTakeRate)
        {
            <span data-target="FS|@marketIdentifier|@featureIdentifier">@(string.Format("{0:P2}", featureRow.Field<decimal>("TotalPercentageTakeRate")))</span>
        }
        else
        {
            <span data-target="FS|@marketIdentifier|@featureIdentifier">@(featureRow.Field<int>("TotalVolume"))</span>
        }
    </td>
    @foreach (var availableModel in Model.Document.Vehicle.AvailableModels)
    {
        var modelClassName = "";
        var modelIdentifier = availableModel.StringIdentifier;
        if (featureIdentifier.StartsWith("F") || availableModel.FdpModelId.HasValue)
        {
            modelClassName = "fdp-data-item";
        }
        else
        {
            modelClassName = "";
        }
        <td class="text-center cross-tab-data-item  @modelClassName @RenderDataClass(modelIdentifier, featureRow)" data-feature="@featureIdentifier" data-model="@modelIdentifier">
            <div class="@RenderEditableClass()" data-target="@marketIdentifier|@modelIdentifier|@featureIdentifier">
                @RenderDataItem(availableModel.StringIdentifier, featureRow)
            </div>

            <div class="glyphicon glyphicon-alert validation-error feature-validation-error" style="display:none" data-content=""></div>
            @{
        var notes = Model.Document.TakeRateData.NoteAvailability.Where(n => n.FeatureIdentifier == featureIdentifier && n.ModelIdentifier == modelIdentifier);
        if (notes.Any())
        {
            <div class="indicator comment-item" role="button" data-toggle="popover" title="Notes" data-content="Notes have been added for this item. Click &quot;View Details...&quot for additional information"><div class="triangle"></div></div>
        }
        else
        {
            <div class="triangle" style="display:none"></div>
        }
            }

        </td>
    }
</tr>

@helper RenderDataItem(string modelIdentifier, DataRow dataItem)
{
    var rowIdentity = dataItem.Field<long?>("Id");
    var featureIdentifier = dataItem.Field<string>("FeatureIdentifier");
    var featureApplicability =
        Model.Document.TakeRateData.FeatureApplicabilityData.Where(fa => fa.Field<long?>("Id") == rowIdentity)
        .Select(fa => fa.IsNull(modelIdentifier) ? string.Empty : fa.Field<string>(modelIdentifier))
        .FirstOrDefault();


    var parsedFeatureApplicability = featureApplicability
        .Replace("*", string.Empty)
        .Replace("(", string.Empty)
        .Replace(")", string.Empty)
        .Replace("1-", string.Empty)
        .Replace("2-", string.Empty)
        .Replace("3-", string.Empty);
        
    // If volume
    // 1. If no value and optional or standard (-)
    // 2. If no value and not applicable (N/A)
    // 3. If value render the value regardless of applicability
    // 4. If no coded applicability and no value (-)

    // If percentage
    // 1. If no value and optional or standard (-)
    // 2. If no value and not applicable (N/A)
    // 3. If value render the value regardless of applicability
    // 4. If no coded applicability and no value (-)

    var dataText = "-";

    if (Model.Document.Mode == enums.TakeRateResultMode.PercentageTakeRate)
    {
        var value = dataItem.Field<decimal?>(modelIdentifier);
        if (value.GetValueOrDefault() == 0 && (parsedFeatureApplicability == "NA" || string.IsNullOrEmpty(parsedFeatureApplicability)) && featureIdentifier.StartsWith("O"))
        {
            dataText = "-";
        }
        else if (value.HasValue)
        {
            dataText = value.Value.ToString("P2");
        }
    }
    else
    {
        var value = dataItem.Field<int?>(modelIdentifier);
        if (value.GetValueOrDefault() == 0 && (parsedFeatureApplicability == "NA" || string.IsNullOrEmpty(parsedFeatureApplicability)) && featureIdentifier.StartsWith("O"))
        {
            dataText = "-";
        }
        else if (value.HasValue)
        {
            dataText = value.Value.ToString("G");
        }
    }

    @dataText
}

@helper RenderEditableClass()
{
    if (!(Model.Document.Market is FeatureDemandPlanning.Model.Empty.EmptyMarket) && Model.AllowEdit)
    {
        @("editable")
    }
    else
    {
        @(string.Empty)
    }
}

@helper RenderExclusiveFeatureGroup(string efg)
{
    var featuresInGroup = Model.Document.TakeRateData.ExclusiveFeatureGroups.Where(g => g.Name.Equals(efg));
        //.OrderBy(g => g.Feature);
    var sb = new StringBuilder();
    foreach (var featureInGroup in featuresInGroup)
    {
        sb.Append(string.Format("{0} ({1})", featureInGroup.Feature, featureInGroup.FeatureCode));
        sb.Append("<br/>");
    }
    @sb.ToString();
}

@helper RenderPack(int packId)
{
    var packFeatures = Model.Document.TakeRateData.PackFeatures.Where(p => p.PackId == packId).OrderBy(p => p.BrandDescription);
    //.OrderBy(g => g.Feature);
    var sb = new StringBuilder();
    foreach (var packFeature in packFeatures)
    {
        sb.Append(packFeature.BrandDescription);
        sb.Append("<br/>");
    }
    @sb.ToString();
}

@helper RenderDataClass(string modelIdentifier, DataRow dataItem)
{
    var rowIdentity = dataItem.Field<long?>("Id");
    var featureApplicability =
        Model.Document.TakeRateData.FeatureApplicabilityData.Where(fa => fa.Field<long?>("Id") == rowIdentity)
        .Select(fa => fa.IsNull(modelIdentifier) ? string.Empty : fa.Field<string>(modelIdentifier))
        .FirstOrDefault();

    if (string.IsNullOrEmpty(featureApplicability))
    {
        @("text-muted");
    }
    else
    {
        var parsedFeatureApplicability = featureApplicability
            .Replace("*", string.Empty)
            .Replace("(", string.Empty)
            .Replace(")", string.Empty)
            .Replace("1-", string.Empty)
            .Replace("2-", string.Empty)
            .Replace("3-", string.Empty);

        switch (parsedFeatureApplicability)
        {
            case "O":
                @("optionalFeature");
                break;
            case "S":
            @("standardFeature");
            break;
            case "P":
            @("packFeature");
            break;
            case "NA":
            @("text-muted");
            break;
            default:
            @("text-muted");
            break;
        }
    }

}
