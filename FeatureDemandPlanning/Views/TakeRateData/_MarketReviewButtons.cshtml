@using FeatureDemandPlanning.Model.Empty
@using enums = FeatureDemandPlanning.Model.Enumerations

@model FeatureDemandPlanning.Model.ViewModel.TakeRateViewModel

<button type="button" class="btn btn-default btn-sm" id="@(Model.IdentifierPrefix)_Powertrain" data-content="Show the powertrain mix for the currently selected market" data-toggle="popover"><span class="glyphicon glyphicon glyphicon-road"></span></button>

@if (Model.TakeRate.MarketReview is EmptyMarketReview)
{
    if (Model.CurrentUser.HasApproverRole())
    {
        <button type="button" class="btn btn-default btn-sm" id="@(Model.IdentifierPrefix)_MarketReview" data-content="Submit take rate data to market for review" data-toggle="popover"><span class="glyphicon glyphicon-flag"></span></button>
    }
}
else
{
    var marketReviewStatus = Model.TakeRate.MarketReview.StatusCode;
    switch (marketReviewStatus)
    {
        case enums.MarketReviewStatus.NotSet:
            if (Model.CurrentUser.HasApproverRole())
            {
                <button type="button" class="btn btn-default btn-sm" id="@(Model.IdentifierPrefix)_MarketReview" data-content="Submit take rate data to market for review" data-toggle="popover"><span class="glyphicon glyphicon-flag"></span></button>
            }
            break;
        case enums.MarketReviewStatus.AwaitingReview:
            if (Model.CurrentUser.HasReviewerRole())
            {
                <button type="button" class="btn btn-default btn-sm" id="@(Model.IdentifierPrefix)_SubmitMarketReview" data-content="Submit changes for approval" data-toggle="popover"><span class="glyphicon glyphicon-send"></span></button>
            }
            break;
        case enums.MarketReviewStatus.AwaitingApproval:
            if (Model.CurrentUser.HasApproverRole())
            {
                <button type="button" class="btn btn-default btn-sm" id="@(Model.IdentifierPrefix)_ApproveMarketReview" data-content="Approve changes" data-toggle="popover"><span class="glyphicon glyphicon-ok"></span></button>
    <button type="button" class="btn btn-default btn-sm" id="@(Model.IdentifierPrefix)_RejectMarketReview" data-content="Reject changes" data-toggle="popover"><span class="glyphicon glyphicon-remove"></span></button>
            }
            break;
        case enums.MarketReviewStatus.Rejected:
            if (Model.CurrentUser.HasReviewerRole())
            {
                <button type="button" class="btn btn-default btn-sm" id="@(Model.IdentifierPrefix)_SubmitMarketReview" data-content="Submit changes for approval" data-toggle="popover"><span class="glyphicon glyphicon-send"></span></button>
            }
            break;
        case enums.MarketReviewStatus.Approved:
            if (Model.CurrentUser.HasApproverRole())
            {
                <button type="button" class="btn btn-default btn-sm" id="@(Model.IdentifierPrefix)_MarketReview" data-content="Submit take rate data to market for review" data-toggle="popover"><span class="glyphicon glyphicon-flag"></span></button>
            }
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }
}
