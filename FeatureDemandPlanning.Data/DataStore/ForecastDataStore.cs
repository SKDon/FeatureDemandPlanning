
/*===============================================================================
 *
 *      Code Comment Block Here.
 *      
 *      Generated by Code Generator on 28/07/2015 12:14  
 * 
 *===============================================================================
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using FeatureDemandPlanning.Dapper;
using FeatureDemandPlanning.BusinessObjects;
using FeatureDemandPlanning.Helpers;
using FeatureDemandPlanning.Interfaces;
using System.Data.SqlClient;

namespace FeatureDemandPlanning.DataStore
{
	public class ForecastDataStore: DataStoreBase
	{
	
		public ForecastDataStore(string cdsid)
		{
			this.CurrentCDSID = cdsid;
		}

		public IEnumerable<Forecast> ForecastGetMany()
		{
			IEnumerable<Forecast> retVal = null;
			using (IDbConnection conn = DbHelper.GetDBConnection())
			{
				try
				{
					var para = new DynamicParameters();
						
					retVal = conn.Query<Forecast>("dbo.Fdp_Forecast_GetMany", para, commandType: CommandType.StoredProcedure);
				}
				catch (Exception ex)
				{
					AppHelper.LogError("ForecastDataStore.ForecastGetMany", ex.Message, CurrentCDSID);
				}
			}

			return retVal;   
		}

		public Forecast ForecastGet(int id)
		{
			Forecast forecast = null;

			using (IDbConnection conn = DbHelper.GetDBConnection())
			{
				try
				{
					var para = new DynamicParameters();
					para.Add("@ForecastId", id, dbType: DbType.Int32);

					var results = conn.QueryMultiple("dbo.Fdp_Forecast_Get", para, commandType: CommandType.StoredProcedure);

					// First resultset represents basic forecast information

					forecast = results.Read<Forecast>().FirstOrDefault();

					// Second resultset represents the forecast vehicle

					if (forecast != null)
					{
                        forecast.ForecastVehicle = results.Read<Vehicle>().FirstOrDefault();
					}

					// Final resultset represents the comparison vehicles

					if (forecast != null)
					{
						forecast.ComparisonVehicles = results.Read<Vehicle>();
					}
				}
				catch (Exception ex)
				{
				   AppHelper.LogError("ForecastDataStore.ForecastGet", ex.Message, CurrentCDSID);
				   throw;
				}
			}

			return forecast;
		}

		//public Forecast ForecastTrimMappingGet(int forecastId)
		//{
		//    using (IDbConnection conn = DbHelper.GetDBConnection())
		//    {
		//        try
		//        {
		//            var para = new DynamicParameters();
		//            para.Add("@ForecastId", forecastId, dbType: DbType.Int32);

		//            var results = conn.QueryMultiple("dbo.Fdp_ForecastMappedTrim_Get", para, commandType: CommandType.StoredProcedure);

		//            // First resultset represents forecast vehicle trim information

		//            forecast = results.Read<Forecast>().FirstOrDefault();

		//            // Second resultset represents the comparison vehicles trim and any mapping information

		//            if (forecast != null)
		//            {
		//                forecast.ForecastVehicle = results.Read<Vehicle>().FirstOrDefault();
		//            }

		//            // Final resultset represents the comparison vehicles

		//            if (forecast != null)
		//            {
		//                forecast.ComparisonVehicles = results.Read<Vehicle>();
		//            }
		//        }
		//        catch (Exception ex)
		//        {
		//            AppHelper.LogError("ForecastDataStore.ForecastGet", ex.Message, CurrentCDSID);
		//            throw;
		//        }
		//    }
		//}

		public IForecast ForecastSave(IForecast forecastToSave)
		{
			try
			{
				using (IDbConnection connection = DbHelper.GetDBConnection())
				{
					var para = new DynamicParameters();

					para.Add("@ForecastId", forecastToSave.ForecastId, dbType: DbType.Int32, direction: ParameterDirection.InputOutput);
					para.Add("@SystemUser", CurrentCDSID, dbType: DbType.String, size: 16);
					para.Add("@ProgrammeId", forecastToSave.ForecastVehicle.ProgrammeId, dbType: DbType.Int32);
					para.Add("@Gateway", forecastToSave.ForecastVehicle.Gateway, dbType: DbType.String, size: 50);

					IDbTransaction trans = connection.BeginTransaction();

					connection.Execute("Fdp_Forecast_Save", para, commandType: CommandType.StoredProcedure, transaction: trans);

					if (!forecastToSave.ForecastId.HasValue)
					{
						forecastToSave.ForecastId = para.Get<int>("@ForecastId");
					}

                    ForecastComparisonVehiclesSave(forecastToSave, connection, trans);
                    ForecastComparisonTrimSave(forecastToSave, connection, trans);

					trans.Commit();
				}
			}
            catch (SqlException sqex)
            {
                AppHelper.LogError("ForecastDataStore.ForecastSave", sqex.Message, CurrentCDSID);
                throw new ApplicationException("Database store error", sqex);
            }
            catch (ApplicationException ex)
            {
                AppHelper.LogError("ForecastDataStore.ForecastSave", ex.Message, CurrentCDSID);
                throw;
            }

			return forecastToSave;
		}

        public void ForecastComparisonVehiclesSave( IForecast forecastToSave,
                                                    IDbConnection connection,
												    IDbTransaction transaction)
        {
            var vehicleIndex = 1;
            foreach (var comparisonVehicle in forecastToSave.ComparisonVehicles)
            {
                ForecastComparisonVehicleSave(forecastToSave, comparisonVehicle, connection, transaction, vehicleIndex++);
            }
        }

        public void ForecastComparisonTrimSave( IForecast forecastToSave,
                                                IDbConnection connection,
												IDbTransaction transaction)
        {
            foreach (var mapping in forecastToSave.TrimMapping)
            {
                if (mapping.ComparisonVehicleTrimId.HasValue)
                {
                    ForecastComparisonTrimSave(forecastToSave, mapping, connection, transaction);
                }
                else
                {
                    ForecastComparisonTrimDelete(forecastToSave, mapping, connection, transaction);
                }
            }
        }

        public void ForecastComparisonTrimSave( IForecast forecastToSave, 
												TrimMapping mappingToSave,
												IDbConnection connection,
												IDbTransaction transaction)
        {
            using (IDbConnection conn = DbHelper.GetDBConnection())
            {
                try
                {
                    var para = new DynamicParameters();
                    para.Add("@ForecastId", forecastToSave.ForecastId, dbType: DbType.Int32);
                    para.Add("@SystemUser", CurrentCDSID, dbType: DbType.String, size: 16);
                    para.Add("@ForecastVehicleTrimId", mappingToSave.ForecastVehicleTrimId, dbType: DbType.Int32);
                    para.Add("@ComparisonVehicleProgrammeId", mappingToSave.ComparisonVehicleProgrammeId, dbType: DbType.Int32);
                    para.Add("@ComparisonVehicleTrimId", mappingToSave.ComparisonVehicleTrimId.Value, dbType: DbType.Int32);
                    para.Add("@ForecastComparisonTrimId", null, dbType: DbType.Int32, direction: ParameterDirection.Output);

                    connection.Execute("Fdp_ForecastComparisonTrim_Save", para, commandType: CommandType.StoredProcedure, transaction: transaction);

                    if (!mappingToSave.Id.HasValue)
                    {
                        mappingToSave.Id = para.Get<int>("@ForecastComparisonTrimId");
                    }
                }
                catch (SqlException sqex)
                {
                    AppHelper.LogError("ForecastDataStore.ForecastComparisonTrimSave", sqex.Message, CurrentCDSID);
                    throw new ApplicationException("Data store error", sqex);
                }
                catch (ApplicationException ex)
                {
                    AppHelper.LogError("ForecastDataStore.ForecastComparisonTrimSave", ex.Message, CurrentCDSID);
                    throw;
                }
            }
        }

        public void ForecastComparisonTrimDelete(   IForecast forecastToSave, 
												    TrimMapping mappingToDelete,
												    IDbConnection connection,
												    IDbTransaction transaction)
        {
            using (IDbConnection conn = DbHelper.GetDBConnection())
            {
                try
                {
                    var para = new DynamicParameters();
                    para.Add("@ForecastId", forecastToSave.ForecastId, dbType: DbType.Int32);
                    para.Add("@SystemUser", CurrentCDSID, dbType: DbType.String, size: 16);
                    para.Add("@ForecastVehicleTrimId", mappingToDelete.ForecastVehicleTrimId, dbType: DbType.Int32);
                    para.Add("@ComparisonVehicleProgrammeId", mappingToDelete.ComparisonVehicleProgrammeId, dbType: DbType.Int32);

                    connection.Execute("Fdp_ForecastComparisonTrim_Delete", para, commandType: CommandType.StoredProcedure, transaction: transaction);
                }
                catch (Exception ex)
                {
                    AppHelper.LogError("ForecastDataStore.ForecastComparisonTrimDelete", ex.Message, CurrentCDSID);
                    throw;
                }
            }
        }

		public void ForecastComparisonVehicleSave(  IForecast forecastToSave, 
												    IVehicle vehicleToSave,
												    IDbConnection connection,
												    IDbTransaction transaction,
												    int vehicleIndex)
		{
			using (IDbConnection conn = DbHelper.GetDBConnection())
			{
				try
				{
					int? forecastComparisonId = null;
                    var para = new DynamicParameters();
					para.Add("@ForecastId", forecastToSave.ForecastId, dbType: DbType.Int32);
					para.Add("@SystemUser", CurrentCDSID, dbType: DbType.String, size: 16);
					para.Add("@ProgrammeId", vehicleToSave.ProgrammeId, dbType: DbType.Int32);
					para.Add("@VehicleIndex", vehicleIndex, dbType: DbType.Int32);
                    para.Add("@ForecastComparisonId", null, dbType: DbType.Int32, direction: ParameterDirection.Output);

					connection.Execute("Fdp_ForecastComparisonVehicle_Save", para, commandType: CommandType.StoredProcedure, transaction: transaction);

                    forecastComparisonId = para.Get<int>("@ForecastComparisonId");
				}
                catch (SqlException sqex)
                {
                    AppHelper.LogError("ForecastDataStore.ForecastComparisonVehicleSave", sqex.Message, CurrentCDSID);
                    throw new ApplicationException("Data store error", sqex);
                }
				catch (ApplicationException ex)
				{
					AppHelper.LogError("ForecastDataStore.ForecastComparisonVehicleSave", ex.Message, CurrentCDSID);
					throw;
				}
			}
		}

		public bool ForecastDelete(int id)
		{
			bool retVal = true;
			
			using (IDbConnection conn = DbHelper.GetDBConnection())
			{
				try
				{
					var para = new DynamicParameters();
					para.Add("@ForecastId", id, dbType: DbType.Int32);
					para.Add("@SystemUser", CurrentCDSID, dbType: DbType.String, size: 16);               
				}
				catch (Exception ex)
				{
					AppHelper.LogError("ForecastDataStore.ForecastDelete", ex.Message, CurrentCDSID);
					retVal = false;
				}
			}

			return retVal;
		}

        public IEnumerable<TrimMapping> TrimMappingGetMany(int forecastId)
        {
            IEnumerable<TrimMapping> retVal = null;
            using (IDbConnection conn = DbHelper.GetDBConnection())
            {
                try
                {
                    var para = new DynamicParameters();
                    para.Add("@ForecastId", forecastId, dbType: DbType.Int32);

                    retVal = conn.Query<TrimMapping>("dbo.Fdp_ForecastComparisonTrim_GetMany", para, commandType: CommandType.StoredProcedure);
                }
                catch (Exception ex)
                {
                    AppHelper.LogError("ForecastDataStore.TrimMappingGetMany", ex.Message, CurrentCDSID);
                }
            }

            return retVal;   
        }
    }
}