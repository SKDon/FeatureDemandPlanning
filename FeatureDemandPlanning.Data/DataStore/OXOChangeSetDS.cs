
/*===============================================================================
 *
 *      Code Comment Block Here.
 *      
 *      Generated by Code Generator on 23/07/2014 11:43  
 * 
 *===============================================================================
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using FeatureDemandPlanning.Model.Dapper;
using FeatureDemandPlanning.Model;
using FeatureDemandPlanning.Model.Helpers;

namespace FeatureDemandPlanning.DataStore
{
    public class ChangeSetDataStore: DataStoreBase
    {
    
        public ChangeSetDataStore(string cdsid)
        {
            this.CurrentCDSID = cdsid;
        }

        public IEnumerable<ChangeSet> ChangeSetGetMany (int OXODocId)
        {
            IEnumerable<ChangeSet> retVal = null;
			using (IDbConnection conn = DbHelper.GetDBConnection())
            {
				try
				{
					var para = new DynamicParameters();
					para.Add("@p_OXODocId", OXODocId, dbType: DbType.Int32);
        			retVal = conn.Query<ChangeSet>("dbo.OXO_ChangeSet_GetMany", para, commandType: CommandType.StoredProcedure);
				}
				catch (Exception ex)
				{
                    Log.Error(ex);
                    throw;
				}
			}

            return retVal;   
        }

        public ChangeSet ChangeSetGet(int id)
        {
            ChangeSet retVal = null;

			using (IDbConnection conn = DbHelper.GetDBConnection())
			{
				try
				{
					var para = new DynamicParameters();
					para.Add("@p_set_id", id, dbType: DbType.Int32);
					retVal = conn.Query<ChangeSet>("dbo.OXO_OXODocChangeLog_Get", para, commandType: CommandType.StoredProcedure).FirstOrDefault();
				}
				catch (Exception ex)
				{
                    Log.Error(ex);
                    throw;
				}
			}

            return retVal;
        }

        
        public IEnumerable<ChangeSetDetail> ChangeSetDetailGetMany(int setId, int progId, int docId)
        {
            IEnumerable<ChangeSetDetail> retVal = null;
            using (IDbConnection conn = DbHelper.GetDBConnection())
            {
                try
                {
                    var para = new DynamicParameters();
                    para.Add("@p_set_id", setId, dbType: DbType.Int32);
                    para.Add("@p_prog_id", progId, dbType: DbType.Int32);
                    para.Add("@p_doc_id", docId, dbType: DbType.Int32);
                    retVal = conn.Query<ChangeSetDetail>("dbo.OXO_ChangeSetDetail_GetMany", para, commandType: CommandType.StoredProcedure);
                }
                catch (Exception ex)
                {
                    Log.Error(ex);
                    throw;
                }
            }

            return retVal;
        }

        public IEnumerable<ChangeSetDownload> ChangeSetDetailDownload(int docId, int progId)
        {
            IEnumerable<ChangeSetDownload> retVal = null;
            using (IDbConnection conn = DbHelper.GetDBConnection())
            {
                try
                {
                    var para = new DynamicParameters();
                    para.Add("@p_oxo_doc_id", docId, dbType: DbType.Int32);
                    para.Add("@p_prog_id", progId, dbType: DbType.Int32);
                    retVal = conn.Query<ChangeSetDownload>("dbo.OXO_ChangeSetDetail_Download", para, commandType: CommandType.StoredProcedure);
                }
                catch (Exception ex)
                {
                    Log.Error(ex);
                    throw;
                }
            }

            return retVal;
        }

        public bool ChangeSetSave(ChangeSet obj)
        {
            bool retVal = true;
            string procName = "dbo.OXO_ChangeSet_New";

            using (IDbConnection conn = DbHelper.GetDBConnection())
            {
                try
                {
                    obj.Save(this.CurrentCDSID);

                    var para = new DynamicParameters();

                    para.Add("@p_doc_Id", obj.OXODocId, dbType: DbType.Int32);
                    para.Add("@p_section", obj.Section, dbType: DbType.String, size: 8);
                    para.Add("@p_reminder", obj.Reminder, dbType: DbType.String, size: 500);
                    para.Add("@p_Updated_By", obj.UpdatedBy, dbType: DbType.String, size: 8);
                    para.Add("@p_Id", obj.Id, dbType: DbType.Int32, direction: ParameterDirection.InputOutput);

                    conn.Execute(procName, para, commandType: CommandType.StoredProcedure);
                    obj.Id = para.Get<int>("@p_Id");


                }
                catch (Exception ex)
                {
                    Log.Error(ex);
                    throw;
                }
            }

            return retVal;

        }

    }
}